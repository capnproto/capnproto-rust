// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: json.capnp


pub mod value {
  pub use self::Which::{Null,Boolean,Number,String,Array,Object,Call,Raw};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl crate::introspect::Introspect for Owned { fn introspect() -> crate::introspect::Type { crate::introspect::TypeVariant::Struct(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl crate::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: crate::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> crate::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: crate::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_struct::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      crate::dynamic_struct::Reader::new(reader.reader, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Reader::from(reader))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastReader<'a> for Reader<'a,>  {
    fn downcast_reader(reader: crate::dynamic_value::Reader<'a>) -> Self {
      let reader = crate::private::layout::struct_reader_downcast_helper::<Owned<>>(reader);
      Reader::from(reader)
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> crate::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &crate::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> crate::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> crate::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> crate::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a crate::private::layout::CapTable) {
      self.reader.imbue(crate::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn has_string(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_array(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_object(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_call(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_raw(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 7 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, crate::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Null(
            ()
          ))
        }
        1 => {
          ::core::result::Result::Ok(Boolean(
            self.reader.get_bool_field(16)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Number(
            self.reader.get_data_field::<f64>(1)
          ))
        }
        3 => {
          ::core::result::Result::Ok(String(
            crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Array(
            crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(Object(
            crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(Call(
            crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Raw(
            crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(crate::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: crate::private::layout::StructBuilder<'a> }
  impl <'a,> crate::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: crate::private::layout::StructSize = crate::private::layout::StructSize { data: 2, pointers: 1 };
  }
  impl <'a,> crate::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: crate::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_struct::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      crate::dynamic_struct::Builder::new(builder.builder, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Builder::from(builder))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastBuilder<'a> for Builder<'a,>  {
    fn downcast_builder(builder: crate::dynamic_value::Builder<'a>) -> Self {
      let builder = crate::private::layout::struct_builder_downcast_helper::<Owned<>>(builder);
      Builder::from(builder)
    }
  }

  impl <'a,> crate::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut crate::private::layout::CapTable) {
      self.builder.imbue(crate::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> crate::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: crate::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: crate::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> crate::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: crate::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> crate::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn set_null(&mut self, _value: ())  {
      self.builder.set_data_field::<u16>(0, 0);
    }
    #[inline]
    pub fn set_boolean(&mut self, value: bool)  {
      self.builder.set_data_field::<u16>(0, 1);
      self.builder.set_bool_field(16, value);
    }
    #[inline]
    pub fn set_number(&mut self, value: f64)  {
      self.builder.set_data_field::<u16>(0, 2);
      self.builder.set_data_field::<f64>(1, value);
    }
    #[inline]
    pub fn set_string(&mut self, value: crate::text::Reader<'_>)  {
      self.builder.set_data_field::<u16>(0, 3);
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_string(self, size: u32) -> crate::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 3);
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_string(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 3 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_array(&mut self, value: crate::struct_list::Reader<'a,crate::json::json_capnp::value::Owned>) -> crate::Result<()> {
      self.builder.set_data_field::<u16>(0, 4);
      crate::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_array(self, size: u32) -> crate::struct_list::Builder<'a,crate::json::json_capnp::value::Owned> {
      self.builder.set_data_field::<u16>(0, 4);
      crate::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_array(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_object(&mut self, value: crate::struct_list::Reader<'a,crate::json::json_capnp::value::field::Owned>) -> crate::Result<()> {
      self.builder.set_data_field::<u16>(0, 5);
      crate::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_object(self, size: u32) -> crate::struct_list::Builder<'a,crate::json::json_capnp::value::field::Owned> {
      self.builder.set_data_field::<u16>(0, 5);
      crate::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_object(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 5 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_call(&mut self, value: crate::json::json_capnp::value::call::Reader<'_>) -> crate::Result<()> {
      self.builder.set_data_field::<u16>(0, 6);
      crate::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_call(self, ) -> crate::json::json_capnp::value::call::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 6);
      crate::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_call(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 6 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_raw(&mut self, value: crate::text::Reader<'_>)  {
      self.builder.set_data_field::<u16>(0, 7);
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_raw(self, size: u32) -> crate::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 7);
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_raw(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 7 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, crate::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Null(
            ()
          ))
        }
        1 => {
          ::core::result::Result::Ok(Boolean(
            self.builder.get_bool_field(16)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Number(
            self.builder.get_data_field::<f64>(1)
          ))
        }
        3 => {
          ::core::result::Result::Ok(String(
            crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Array(
            crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(Object(
            crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(Call(
            crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Raw(
            crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(crate::NotInSchema(x))
      }
    }
  }

  impl <'a,> ::core::fmt::Debug for Builder<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(self.reborrow_as_reader()), f)
    }
  }

  pub struct Pipeline { _typeless: crate::any_pointer::Pipeline }
  impl crate::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: crate::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [crate::Word; 151] = [
      crate::word(0, 0, 0, 0, 5, 0, 6, 0),
      crate::word(131, 221, 25, 249, 69, 120, 250, 163),
      crate::word(11, 0, 0, 0, 1, 0, 2, 0),
      crate::word(52, 94, 58, 164, 151, 146, 249, 142),
      crate::word(1, 0, 7, 0, 0, 0, 8, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(21, 0, 0, 0, 138, 0, 0, 0),
      crate::word(29, 0, 0, 0, 39, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(49, 0, 0, 0, 199, 1, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(106, 115, 111, 110, 46, 99, 97, 112),
      crate::word(110, 112, 58, 86, 97, 108, 117, 101),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(8, 0, 0, 0, 1, 0, 1, 0),
      crate::word(223, 157, 214, 53, 231, 38, 16, 227),
      crate::word(9, 0, 0, 0, 50, 0, 0, 0),
      crate::word(72, 61, 201, 161, 236, 246, 217, 160),
      crate::word(5, 0, 0, 0, 42, 0, 0, 0),
      crate::word(70, 105, 101, 108, 100, 0, 0, 0),
      crate::word(67, 97, 108, 108, 0, 0, 0, 0),
      crate::word(32, 0, 0, 0, 3, 0, 4, 0),
      crate::word(0, 0, 255, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(209, 0, 0, 0, 42, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(204, 0, 0, 0, 3, 0, 1, 0),
      crate::word(216, 0, 0, 0, 2, 0, 1, 0),
      crate::word(1, 0, 254, 255, 16, 0, 0, 0),
      crate::word(0, 0, 1, 0, 1, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(213, 0, 0, 0, 66, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(208, 0, 0, 0, 3, 0, 1, 0),
      crate::word(220, 0, 0, 0, 2, 0, 1, 0),
      crate::word(2, 0, 253, 255, 1, 0, 0, 0),
      crate::word(0, 0, 1, 0, 2, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(217, 0, 0, 0, 58, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(212, 0, 0, 0, 3, 0, 1, 0),
      crate::word(224, 0, 0, 0, 2, 0, 1, 0),
      crate::word(3, 0, 252, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 3, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(221, 0, 0, 0, 58, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(216, 0, 0, 0, 3, 0, 1, 0),
      crate::word(228, 0, 0, 0, 2, 0, 1, 0),
      crate::word(4, 0, 251, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 4, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(225, 0, 0, 0, 50, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(220, 0, 0, 0, 3, 0, 1, 0),
      crate::word(248, 0, 0, 0, 2, 0, 1, 0),
      crate::word(5, 0, 250, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 5, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(245, 0, 0, 0, 58, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(240, 0, 0, 0, 3, 0, 1, 0),
      crate::word(12, 1, 0, 0, 2, 0, 1, 0),
      crate::word(6, 0, 249, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 6, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(9, 1, 0, 0, 42, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(4, 1, 0, 0, 3, 0, 1, 0),
      crate::word(16, 1, 0, 0, 2, 0, 1, 0),
      crate::word(7, 0, 248, 255, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 7, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(13, 1, 0, 0, 34, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(8, 1, 0, 0, 3, 0, 1, 0),
      crate::word(20, 1, 0, 0, 2, 0, 1, 0),
      crate::word(110, 117, 108, 108, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(98, 111, 111, 108, 101, 97, 110, 0),
      crate::word(1, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(1, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(110, 117, 109, 98, 101, 114, 0, 0),
      crate::word(11, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(11, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(115, 116, 114, 105, 110, 103, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(97, 114, 114, 97, 121, 0, 0, 0),
      crate::word(14, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 3, 0, 1, 0),
      crate::word(16, 0, 0, 0, 0, 0, 0, 0),
      crate::word(131, 221, 25, 249, 69, 120, 250, 163),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(14, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(111, 98, 106, 101, 99, 116, 0, 0),
      crate::word(14, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 3, 0, 1, 0),
      crate::word(16, 0, 0, 0, 0, 0, 0, 0),
      crate::word(223, 157, 214, 53, 231, 38, 16, 227),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(14, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(99, 97, 108, 108, 0, 0, 0, 0),
      crate::word(16, 0, 0, 0, 0, 0, 0, 0),
      crate::word(72, 61, 201, 161, 236, 246, 217, 160),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(16, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(114, 97, 119, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> crate::introspect::Type {
      match index {
        0 => <() as crate::introspect::Introspect>::introspect(),
        1 => <bool as crate::introspect::Introspect>::introspect(),
        2 => <f64 as crate::introspect::Introspect>::introspect(),
        3 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
        4 => <crate::struct_list::Owned<crate::json::json_capnp::value::Owned> as crate::introspect::Introspect>::introspect(),
        5 => <crate::struct_list::Owned<crate::json::json_capnp::value::field::Owned> as crate::introspect::Introspect>::introspect(),
        6 => <crate::json::json_capnp::value::call::Owned as crate::introspect::Introspect>::introspect(),
        7 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> crate::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: crate::introspect::RawStructSchema = crate::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[0,1,2,3,4,5,6,7];
    pub const TYPE_ID: u64 = 0xa3fa_7845_f919_dd83;
  }
  pub enum Which<A0,A1,A2,A3,A4> {
    Null(()),
    Boolean(bool),
    Number(f64),
    String(A0),
    Array(A1),
    Object(A2),
    Call(A3),
    Raw(A4),
  }
  pub type WhichReader<'a,> = Which<crate::Result<crate::text::Reader<'a>>,crate::Result<crate::struct_list::Reader<'a,crate::json::json_capnp::value::Owned>>,crate::Result<crate::struct_list::Reader<'a,crate::json::json_capnp::value::field::Owned>>,crate::Result<crate::json::json_capnp::value::call::Reader<'a>>,crate::Result<crate::text::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<crate::Result<crate::text::Builder<'a>>,crate::Result<crate::struct_list::Builder<'a,crate::json::json_capnp::value::Owned>>,crate::Result<crate::struct_list::Builder<'a,crate::json::json_capnp::value::field::Owned>>,crate::Result<crate::json::json_capnp::value::call::Builder<'a>>,crate::Result<crate::text::Builder<'a>>>;

  pub mod field {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl crate::introspect::Introspect for Owned { fn introspect() -> crate::introspect::Type { crate::introspect::TypeVariant::Struct(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl crate::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl crate::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl crate::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: crate::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> crate::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<crate::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: crate::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_struct::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        crate::dynamic_struct::Reader::new(reader.reader, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(crate::dynamic_struct::Reader::from(reader))
      }
    }

    impl <'a,> crate::dynamic_value::DowncastReader<'a> for Reader<'a,>  {
      fn downcast_reader(reader: crate::dynamic_value::Reader<'a>) -> Self {
        let reader = crate::private::layout::struct_reader_downcast_helper::<Owned<>>(reader);
        Reader::from(reader)
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> crate::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &crate::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> crate::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> crate::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> crate::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a crate::private::layout::CapTable) {
        self.reader.imbue(crate::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_name(self) -> crate::Result<crate::text::Reader<'a>> {
        crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> crate::Result<crate::json::json_capnp::value::Reader<'a>> {
        crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: crate::private::layout::StructBuilder<'a> }
    impl <'a,> crate::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: crate::private::layout::StructSize = crate::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,> crate::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<crate::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: crate::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_struct::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        crate::dynamic_struct::Builder::new(builder.builder, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(crate::dynamic_struct::Builder::from(builder))
      }
    }

    impl <'a,> crate::dynamic_value::DowncastBuilder<'a> for Builder<'a,>  {
      fn downcast_builder(builder: crate::dynamic_value::Builder<'a>) -> Self {
        let builder = crate::private::layout::struct_builder_downcast_helper::<Owned<>>(builder);
        Builder::from(builder)
      }
    }

    impl <'a,> crate::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut crate::private::layout::CapTable) {
        self.builder.imbue(crate::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> crate::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: crate::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: crate::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> crate::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: crate::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> crate::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_name(self) -> crate::Result<crate::text::Builder<'a>> {
        crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_name(&mut self, value: crate::text::Reader<'_>)  {
        self.builder.reborrow().get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_name(self, size: u32) -> crate::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_value(self) -> crate::Result<crate::json::json_capnp::value::Builder<'a>> {
        crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_value(&mut self, value: crate::json::json_capnp::value::Reader<'_>) -> crate::Result<()> {
        crate::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_value(self, ) -> crate::json::json_capnp::value::Builder<'a> {
        crate::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    impl <'a,> ::core::fmt::Debug for Builder<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(self.reborrow_as_reader()), f)
      }
    }

    pub struct Pipeline { _typeless: crate::any_pointer::Pipeline }
    impl crate::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: crate::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
      pub fn get_value(&self) -> crate::json::json_capnp::value::Pipeline {
        crate::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [crate::Word; 47] = [
        crate::word(0, 0, 0, 0, 5, 0, 6, 0),
        crate::word(223, 157, 214, 53, 231, 38, 16, 227),
        crate::word(17, 0, 0, 0, 1, 0, 0, 0),
        crate::word(131, 221, 25, 249, 69, 120, 250, 163),
        crate::word(2, 0, 7, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(21, 0, 0, 0, 186, 0, 0, 0),
        crate::word(29, 0, 0, 0, 7, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(25, 0, 0, 0, 119, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(106, 115, 111, 110, 46, 99, 97, 112),
        crate::word(110, 112, 58, 86, 97, 108, 117, 101),
        crate::word(46, 70, 105, 101, 108, 100, 0, 0),
        crate::word(0, 0, 0, 0, 1, 0, 1, 0),
        crate::word(8, 0, 0, 0, 3, 0, 4, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 1, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(41, 0, 0, 0, 42, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(36, 0, 0, 0, 3, 0, 1, 0),
        crate::word(48, 0, 0, 0, 2, 0, 1, 0),
        crate::word(1, 0, 0, 0, 1, 0, 0, 0),
        crate::word(0, 0, 1, 0, 1, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(45, 0, 0, 0, 50, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(40, 0, 0, 0, 3, 0, 1, 0),
        crate::word(52, 0, 0, 0, 2, 0, 1, 0),
        crate::word(110, 97, 109, 101, 0, 0, 0, 0),
        crate::word(12, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(12, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(118, 97, 108, 117, 101, 0, 0, 0),
        crate::word(16, 0, 0, 0, 0, 0, 0, 0),
        crate::word(131, 221, 25, 249, 69, 120, 250, 163),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(16, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> crate::introspect::Type {
        match index {
          0 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
          1 => <crate::json::json_capnp::value::Owned as crate::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> crate::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: crate::introspect::RawStructSchema = crate::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub const TYPE_ID: u64 = 0xe310_26e7_35d6_9ddf;
    }
  }

  pub mod call {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl crate::introspect::Introspect for Owned { fn introspect() -> crate::introspect::Type { crate::introspect::TypeVariant::Struct(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl crate::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl crate::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl crate::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: crate::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> crate::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<crate::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: crate::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_struct::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        crate::dynamic_struct::Reader::new(reader.reader, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(crate::dynamic_struct::Reader::from(reader))
      }
    }

    impl <'a,> crate::dynamic_value::DowncastReader<'a> for Reader<'a,>  {
      fn downcast_reader(reader: crate::dynamic_value::Reader<'a>) -> Self {
        let reader = crate::private::layout::struct_reader_downcast_helper::<Owned<>>(reader);
        Reader::from(reader)
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> crate::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &crate::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> crate::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> crate::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> crate::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a crate::private::layout::CapTable) {
        self.reader.imbue(crate::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_function(self) -> crate::Result<crate::text::Reader<'a>> {
        crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_function(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_params(self) -> crate::Result<crate::struct_list::Reader<'a,crate::json::json_capnp::value::Owned>> {
        crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_params(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: crate::private::layout::StructBuilder<'a> }
    impl <'a,> crate::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: crate::private::layout::StructSize = crate::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,> crate::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<crate::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: crate::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_struct::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        crate::dynamic_struct::Builder::new(builder.builder, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(crate::dynamic_struct::Builder::from(builder))
      }
    }

    impl <'a,> crate::dynamic_value::DowncastBuilder<'a> for Builder<'a,>  {
      fn downcast_builder(builder: crate::dynamic_value::Builder<'a>) -> Self {
        let builder = crate::private::layout::struct_builder_downcast_helper::<Owned<>>(builder);
        Builder::from(builder)
      }
    }

    impl <'a,> crate::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut crate::private::layout::CapTable) {
        self.builder.imbue(crate::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> crate::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: crate::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: crate::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> crate::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: crate::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> crate::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_function(self) -> crate::Result<crate::text::Builder<'a>> {
        crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_function(&mut self, value: crate::text::Reader<'_>)  {
        self.builder.reborrow().get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_function(self, size: u32) -> crate::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_function(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_params(self) -> crate::Result<crate::struct_list::Builder<'a,crate::json::json_capnp::value::Owned>> {
        crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_params(&mut self, value: crate::struct_list::Reader<'a,crate::json::json_capnp::value::Owned>) -> crate::Result<()> {
        crate::traits::SetPointerBuilder::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_params(self, size: u32) -> crate::struct_list::Builder<'a,crate::json::json_capnp::value::Owned> {
        crate::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_params(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    impl <'a,> ::core::fmt::Debug for Builder<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(self.reborrow_as_reader()), f)
      }
    }

    pub struct Pipeline { _typeless: crate::any_pointer::Pipeline }
    impl crate::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: crate::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [crate::Word; 52] = [
        crate::word(0, 0, 0, 0, 5, 0, 6, 0),
        crate::word(72, 61, 201, 161, 236, 246, 217, 160),
        crate::word(17, 0, 0, 0, 1, 0, 0, 0),
        crate::word(131, 221, 25, 249, 69, 120, 250, 163),
        crate::word(2, 0, 7, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(21, 0, 0, 0, 178, 0, 0, 0),
        crate::word(29, 0, 0, 0, 7, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(25, 0, 0, 0, 119, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(106, 115, 111, 110, 46, 99, 97, 112),
        crate::word(110, 112, 58, 86, 97, 108, 117, 101),
        crate::word(46, 67, 97, 108, 108, 0, 0, 0),
        crate::word(0, 0, 0, 0, 1, 0, 1, 0),
        crate::word(8, 0, 0, 0, 3, 0, 4, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 1, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(41, 0, 0, 0, 74, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(40, 0, 0, 0, 3, 0, 1, 0),
        crate::word(52, 0, 0, 0, 2, 0, 1, 0),
        crate::word(1, 0, 0, 0, 1, 0, 0, 0),
        crate::word(0, 0, 1, 0, 1, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(49, 0, 0, 0, 58, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(44, 0, 0, 0, 3, 0, 1, 0),
        crate::word(72, 0, 0, 0, 2, 0, 1, 0),
        crate::word(102, 117, 110, 99, 116, 105, 111, 110),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(12, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(12, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(112, 97, 114, 97, 109, 115, 0, 0),
        crate::word(14, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 3, 0, 1, 0),
        crate::word(16, 0, 0, 0, 0, 0, 0, 0),
        crate::word(131, 221, 25, 249, 69, 120, 250, 163),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(14, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
        crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> crate::introspect::Type {
        match index {
          0 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
          1 => <crate::struct_list::Owned<crate::json::json_capnp::value::Owned> as crate::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> crate::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: crate::introspect::RawStructSchema = crate::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub const TYPE_ID: u64 = 0xa0d9_f6ec_a1c9_3d48;
    }
  }
}
pub mod name {
  pub const ID: u64 = 0xfa5b1fd61c2e7c3d;
  pub fn get_type() -> crate::introspect::Type { <crate::text::Owned as crate::introspect::Introspect>::introspect() }
}
pub mod flatten {
  pub const ID: u64 = 0x82d3e852af0336bf;
  pub fn get_type() -> crate::introspect::Type { <crate::json::json_capnp::flatten_options::Owned as crate::introspect::Introspect>::introspect() }
}

pub mod flatten_options {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl crate::introspect::Introspect for Owned { fn introspect() -> crate::introspect::Type { crate::introspect::TypeVariant::Struct(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl crate::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: crate::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> crate::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: crate::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_struct::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      crate::dynamic_struct::Reader::new(reader.reader, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Reader::from(reader))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastReader<'a> for Reader<'a,>  {
    fn downcast_reader(reader: crate::dynamic_value::Reader<'a>) -> Self {
      let reader = crate::private::layout::struct_reader_downcast_helper::<Owned<>>(reader);
      Reader::from(reader)
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> crate::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &crate::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> crate::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> crate::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> crate::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a crate::private::layout::CapTable) {
      self.reader.imbue(crate::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_prefix(self) -> crate::Result<crate::text::Reader<'a>> {
      crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::Some(&_private::DEFAULT_PREFIX[..]))
    }
    #[inline]
    pub fn has_prefix(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: crate::private::layout::StructBuilder<'a> }
  impl <'a,> crate::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: crate::private::layout::StructSize = crate::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,> crate::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: crate::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_struct::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      crate::dynamic_struct::Builder::new(builder.builder, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Builder::from(builder))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastBuilder<'a> for Builder<'a,>  {
    fn downcast_builder(builder: crate::dynamic_value::Builder<'a>) -> Self {
      let builder = crate::private::layout::struct_builder_downcast_helper::<Owned<>>(builder);
      Builder::from(builder)
    }
  }

  impl <'a,> crate::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut crate::private::layout::CapTable) {
      self.builder.imbue(crate::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> crate::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: crate::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: crate::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> crate::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: crate::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> crate::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_prefix(self) -> crate::Result<crate::text::Builder<'a>> {
      crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::Some(&_private::DEFAULT_PREFIX[..]))
    }
    #[inline]
    pub fn set_prefix(&mut self, value: crate::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_prefix(self, size: u32) -> crate::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_prefix(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  impl <'a,> ::core::fmt::Debug for Builder<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(self.reborrow_as_reader()), f)
    }
  }

  pub struct Pipeline { _typeless: crate::any_pointer::Pipeline }
  impl crate::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: crate::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [crate::Word; 34] = [
      crate::word(0, 0, 0, 0, 5, 0, 6, 0),
      crate::word(97, 234, 194, 123, 37, 19, 223, 196),
      crate::word(11, 0, 0, 0, 1, 0, 0, 0),
      crate::word(52, 94, 58, 164, 151, 146, 249, 142),
      crate::word(1, 0, 7, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(21, 0, 0, 0, 210, 0, 0, 0),
      crate::word(33, 0, 0, 0, 7, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(29, 0, 0, 0, 63, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(106, 115, 111, 110, 46, 99, 97, 112),
      crate::word(110, 112, 58, 70, 108, 97, 116, 116),
      crate::word(101, 110, 79, 112, 116, 105, 111, 110),
      crate::word(115, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 1, 0, 1, 0),
      crate::word(4, 0, 0, 0, 3, 0, 4, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 0, 0, 0, 0),
      crate::word(1, 0, 0, 0, 0, 0, 0, 0),
      crate::word(13, 0, 0, 0, 58, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(8, 0, 0, 0, 3, 0, 1, 0),
      crate::word(20, 0, 0, 0, 2, 0, 1, 0),
      crate::word(112, 114, 101, 102, 105, 120, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(1, 0, 0, 0, 10, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> crate::introspect::Type {
      match index {
        0 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> crate::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: crate::introspect::RawStructSchema = crate::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static DEFAULT_PREFIX: [crate::Word; 2] = [
      crate::word(1, 0, 0, 0, 10, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub const TYPE_ID: u64 = 0xc4df_1325_7bc2_ea61;
  }
}
pub mod discriminator {
  pub const ID: u64 = 0xcfa794e8d19a0162;
  pub fn get_type() -> crate::introspect::Type { <crate::json::json_capnp::discriminator_options::Owned as crate::introspect::Introspect>::introspect() }
}

pub mod discriminator_options {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl crate::introspect::Introspect for Owned { fn introspect() -> crate::introspect::Type { crate::introspect::TypeVariant::Struct(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl crate::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl crate::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: crate::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> crate::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: crate::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_struct::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      crate::dynamic_struct::Reader::new(reader.reader, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for crate::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Reader::from(reader))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastReader<'a> for Reader<'a,>  {
    fn downcast_reader(reader: crate::dynamic_value::Reader<'a>) -> Self {
      let reader = crate::private::layout::struct_reader_downcast_helper::<Owned<>>(reader);
      Reader::from(reader)
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> crate::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &crate::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> crate::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> crate::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> crate::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a crate::private::layout::CapTable) {
      self.reader.imbue(crate::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_name(self) -> crate::Result<crate::text::Reader<'a>> {
      crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_value_name(self) -> crate::Result<crate::text::Reader<'a>> {
      crate::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_value_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder: crate::private::layout::StructBuilder<'a> }
  impl <'a,> crate::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: crate::private::layout::StructSize = crate::private::layout::StructSize { data: 0, pointers: 2 };
  }
  impl <'a,> crate::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<crate::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: crate::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_struct::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      crate::dynamic_struct::Builder::new(builder.builder, crate::schema::StructSchema::new(crate::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>}))
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for crate::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(crate::dynamic_struct::Builder::from(builder))
    }
  }

  impl <'a,> crate::dynamic_value::DowncastBuilder<'a> for Builder<'a,>  {
    fn downcast_builder(builder: crate::dynamic_value::Builder<'a>) -> Self {
      let builder = crate::private::layout::struct_builder_downcast_helper::<Owned<>>(builder);
      Builder::from(builder)
    }
  }

  impl <'a,> crate::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut crate::private::layout::CapTable) {
      self.builder.imbue(crate::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> crate::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: crate::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: crate::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [crate::Word]>) -> crate::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as crate::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> crate::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: crate::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> crate::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> crate::Result<crate::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_name(self) -> crate::Result<crate::text::Builder<'a>> {
      crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_name(&mut self, value: crate::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> crate::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_name(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_value_name(self) -> crate::Result<crate::text::Builder<'a>> {
      crate::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_value_name(&mut self, value: crate::text::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_value_name(self, size: u32) -> crate::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_value_name(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
  }

  impl <'a,> ::core::fmt::Debug for Builder<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<crate::dynamic_value::Reader<'_>>::into(self.reborrow_as_reader()), f)
    }
  }

  pub struct Pipeline { _typeless: crate::any_pointer::Pipeline }
  impl crate::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: crate::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [crate::Word; 49] = [
      crate::word(0, 0, 0, 0, 5, 0, 6, 0),
      crate::word(25, 83, 62, 41, 12, 194, 248, 194),
      crate::word(11, 0, 0, 0, 1, 0, 0, 0),
      crate::word(52, 94, 58, 164, 151, 146, 249, 142),
      crate::word(2, 0, 7, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(21, 0, 0, 0, 2, 1, 0, 0),
      crate::word(33, 0, 0, 0, 7, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(29, 0, 0, 0, 119, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(106, 115, 111, 110, 46, 99, 97, 112),
      crate::word(110, 112, 58, 68, 105, 115, 99, 114),
      crate::word(105, 109, 105, 110, 97, 116, 111, 114),
      crate::word(79, 112, 116, 105, 111, 110, 115, 0),
      crate::word(0, 0, 0, 0, 1, 0, 1, 0),
      crate::word(8, 0, 0, 0, 3, 0, 4, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 1, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(41, 0, 0, 0, 42, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(36, 0, 0, 0, 3, 0, 1, 0),
      crate::word(48, 0, 0, 0, 2, 0, 1, 0),
      crate::word(1, 0, 0, 0, 1, 0, 0, 0),
      crate::word(0, 0, 1, 0, 1, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(45, 0, 0, 0, 82, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(44, 0, 0, 0, 3, 0, 1, 0),
      crate::word(56, 0, 0, 0, 2, 0, 1, 0),
      crate::word(110, 97, 109, 101, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(118, 97, 108, 117, 101, 78, 97, 109),
      crate::word(101, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(12, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
      crate::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> crate::introspect::Type {
      match index {
        0 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
        1 => <crate::text::Owned as crate::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> crate::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: crate::introspect::RawStructSchema = crate::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub const TYPE_ID: u64 = 0xc2f8_c20c_293e_5319;
  }
}
pub mod base64 {
  pub const ID: u64 = 0xd7d879450a253e4b;
  pub fn get_type() -> crate::introspect::Type { <() as crate::introspect::Introspect>::introspect() }
}
pub mod hex {
  pub const ID: u64 = 0xf061e22f0ae5c7b5;
  pub fn get_type() -> crate::introspect::Type { <() as crate::introspect::Introspect>::introspect() }
}
pub mod notification {
  pub const ID: u64 = 0xa0a054dea32fd98c;
  pub fn get_type() -> crate::introspect::Type { <() as crate::introspect::Introspect>::introspect() }
}
